// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
"import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;
  UserType: any;

  UserParent: any;
}

export namespace UserResolvers {
  export type IdType<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string;

  export type NameType<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string;

  export type TypeType<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"UserType\\"];

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string;
    name: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string;
    type: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"UserType\\"];
  }
}

export interface IResolvers<T extends ITypeMap> {
  User: UserResolvers.Type<T>;
}
"
`;

exports[`basic scalar 1`] = `
"import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  AddMemberPayloadParent: any;
  MutationParent: any;
}

export namespace AddMemberPayloadResolvers {
  export type JsonType<T extends ITypeMap> = (
    parent: T[\\"AddMemberPayloadParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null;

  export interface Type<T extends ITypeMap> {
    json: (
      parent: T[\\"AddMemberPayloadParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null;
  }
}

export namespace MutationResolvers {
  export interface ArgsAddMember {
    data: T[\\"AddMemberDataParent\\"];
  }

  export type AddMemberType<T extends ITypeMap> = (
    parent: T[\\"MutationParent\\"],
    args: ArgsAddMember,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"AddMemberPayloadParent\\"];

  export interface Type<T extends ITypeMap> {
    addMember: (
      parent: T[\\"MutationParent\\"],
      args: ArgsAddMember,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"AddMemberPayloadParent\\"];
  }
}

export interface IResolvers<T extends ITypeMap> {
  AddMemberPayload: AddMemberPayloadResolvers.Type<T>;
  Mutation: MutationResolvers.Type<T>;
}
"
`;

exports[`basic schema 1`] = `
"import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  QueryParent: any;
  NumberParent: any;
}

export namespace QueryResolvers {
  export type IdType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string;

  export type Custom_requiredType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"];

  export type Custom_nullableType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"] | null;

  export type Custom_array_nullableType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"][] | null;

  export type Custom_array_requiredType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"][];

  export interface ArgsCustom_with_arg {
    id: number;
  }

  export type Custom_with_argType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsCustom_with_arg,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"];

  export interface ArgsCustom_with_custom_arg {
    id: T[\\"NumberParent\\"];
  }

  export type Custom_with_custom_argType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsCustom_with_custom_arg,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"NumberParent\\"];

  export type Scalar_requiredType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean;

  export type Scalar_nullableType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean | null;

  export type Scalar_array_nullableType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean[] | null;

  export type Scalar_array_requiredType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean[];

  export interface ArgsScalar_with_arg {
    id: number;
  }

  export type Scalar_with_argType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsScalar_with_arg,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean;

  export interface ArgsScalar_with_custom_arg {
    id: T[\\"NumberParent\\"];
  }

  export type Scalar_with_custom_argType<T extends ITypeMap> = (
    parent: T[\\"QueryParent\\"],
    args: ArgsScalar_with_custom_arg,
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => boolean;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string;
    custom_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"];
    custom_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"] | null;
    custom_array_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"][] | null;
    custom_array_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"][];
    custom_with_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsCustom_with_arg,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"];
    custom_with_custom_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsCustom_with_custom_arg,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"NumberParent\\"];
    scalar_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean;
    scalar_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean | null;
    scalar_array_nullable: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean[] | null;
    scalar_array_required: (
      parent: T[\\"QueryParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean[];
    scalar_with_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsScalar_with_arg,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean;
    scalar_with_custom_arg: (
      parent: T[\\"QueryParent\\"],
      args: ArgsScalar_with_custom_arg,
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => boolean;
  }
}

export namespace NumberResolvers {
  export type IdType<T extends ITypeMap> = (
    parent: T[\\"NumberParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null;

  export type ValueType<T extends ITypeMap> = (
    parent: T[\\"NumberParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number | null;

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"NumberParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null;
    value: (
      parent: T[\\"NumberParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number | null;
  }
}

export interface IResolvers<T extends ITypeMap> {
  Query: QueryResolvers.Type<T>;
  Number: NumberResolvers.Type<T>;
}
"
`;

exports[`basic union 1`] = `
"import { GraphQLResolveInfo } from \\"graphql\\";

export interface ITypeMap {
  Context: any;

  UserType: any;
  UserParent: any;
  StudentParent: any;
  ProfessorParent: any;
}

export namespace UserResolvers {
  export type IdType<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string;

  export type NameType<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string;

  export type TypeType<T extends ITypeMap> = (
    parent: T[\\"UserParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => T[\\"UserType\\"];

  export interface Type<T extends ITypeMap> {
    id: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string;
    name: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string;
    type: (
      parent: T[\\"UserParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => T[\\"UserType\\"];
  }
}

export namespace StudentResolvers {
  export type AgeType<T extends ITypeMap> = (
    parent: T[\\"StudentParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => number;

  export interface Type<T extends ITypeMap> {
    age: (
      parent: T[\\"StudentParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => number;
  }
}

export namespace ProfessorResolvers {
  export type DegreeType<T extends ITypeMap> = (
    parent: T[\\"ProfessorParent\\"],
    args: {},
    ctx: T[\\"Context\\"],
    info: GraphQLResolveInfo
  ) => string | null;

  export interface Type<T extends ITypeMap> {
    degree: (
      parent: T[\\"ProfessorParent\\"],
      args: {},
      ctx: T[\\"Context\\"],
      info: GraphQLResolveInfo
    ) => string | null;
  }
}

export interface IResolvers<T extends ITypeMap> {
  User: UserResolvers.Type<T>;
  Student: StudentResolvers.Type<T>;
  Professor: ProfessorResolvers.Type<T>;
}
"
`;
