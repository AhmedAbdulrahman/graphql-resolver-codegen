// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`large schema 1`] = `
"import { GraphQLResolveInfo } from \\"graphql\\";

export interface ResolverFn<Parent, Args, Ctx, Payload> {
  (parent: Parent, args: Args, ctx: Ctx, info: GraphQLResolveInfo):
    | Payload
    | Promise<Payload>;
}

export interface ITypes {
  Context: any;

  QueryParent: any;
  MutationParent: any;
  ViewerParent: any;
  AuthPayloadParent: any;
  MutationResultParent: any;
  ExperiencesByCityParent: any;
  HomeParent: any;
  ReservationParent: any;
  ExperienceParent: any;
  ReviewParent: any;
  NeighbourhoodParent: any;
  LocationParent: any;
  PictureParent: any;
  CityParent: any;
  ExperienceCategoryParent: any;
  UserParent: any;
  PaymentAccountParent: any;
  PlaceParent: any;
  BookingParent: any;
  NotificationParent: any;
  PaymentParent: any;
  PaypalInformationParent: any;
  CreditCardInformationParent: any;
  MessageParent: any;
  PricingParent: any;
  PlaceViewsParent: any;
  GuestRequirementsParent: any;
  PoliciesParent: any;
  HouseRulesParent: any;
  AmenitiesParent: any;
}

export namespace IQuery {
  export type TopExperiencesResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ExperienceParent\\"][]
  >;

  export type TopHomesResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"HomeParent\\"][]
  >;

  export interface ArgsHomesInPriceRange {
    min: number;
    max: number;
  }

  export type HomesInPriceRangeResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    ArgsHomesInPriceRange,
    T[\\"Context\\"],
    T[\\"HomeParent\\"][]
  >;

  export type TopReservationsResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ReservationParent\\"][]
  >;

  export type FeaturedDestinationsResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"NeighbourhoodParent\\"][]
  >;

  export interface ArgsExperiencesByCity {
    cities: string[];
  }

  export type ExperiencesByCityResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    ArgsExperiencesByCity,
    T[\\"Context\\"],
    T[\\"ExperiencesByCityParent\\"][]
  >;

  export type ViewerResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ViewerParent\\"] | null
  >;

  export type MyLocationResolver<T extends ITypes> = ResolverFn<
    T[\\"QueryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"LocationParent\\"] | null
  >;

  export interface Resolver<T extends ITypes> {
    topExperiences: TopExperiencesResolver<T>;
    topHomes: TopHomesResolver<T>;
    homesInPriceRange: HomesInPriceRangeResolver<T>;
    topReservations: TopReservationsResolver<T>;
    featuredDestinations: FeaturedDestinationsResolver<T>;
    experiencesByCity: ExperiencesByCityResolver<T>;
    viewer: ViewerResolver<T>;
    myLocation: MyLocationResolver<T>;
  }
}

export namespace IMutation {
  export interface ArgsSignup {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    phone: string;
  }

  export type SignupResolver<T extends ITypes> = ResolverFn<
    T[\\"MutationParent\\"],
    ArgsSignup,
    T[\\"Context\\"],
    T[\\"AuthPayloadParent\\"]
  >;

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export type LoginResolver<T extends ITypes> = ResolverFn<
    T[\\"MutationParent\\"],
    ArgsLogin,
    T[\\"Context\\"],
    T[\\"AuthPayloadParent\\"]
  >;

  export interface ArgsAddPaymentMethod {
    cardNumber: string;
    expiresOnMonth: number;
    expiresOnYear: number;
    securityCode: string;
    firstName: string;
    lastName: string;
    postalCode: string;
    country: string;
  }

  export type AddPaymentMethodResolver<T extends ITypes> = ResolverFn<
    T[\\"MutationParent\\"],
    ArgsAddPaymentMethod,
    T[\\"Context\\"],
    T[\\"MutationResultParent\\"]
  >;

  export interface ArgsBook {
    placeId: string;
    checkIn: string;
    checkOut: string;
    numGuests: number;
  }

  export type BookResolver<T extends ITypes> = ResolverFn<
    T[\\"MutationParent\\"],
    ArgsBook,
    T[\\"Context\\"],
    T[\\"MutationResultParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    signup: SignupResolver<T>;
    login: LoginResolver<T>;
    addPaymentMethod: AddPaymentMethodResolver<T>;
    book: BookResolver<T>;
  }
}

export namespace IViewer {
  export type MeResolver<T extends ITypes> = ResolverFn<
    T[\\"ViewerParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"UserParent\\"]
  >;

  export type BookingsResolver<T extends ITypes> = ResolverFn<
    T[\\"ViewerParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"BookingParent\\"][]
  >;

  export interface Resolver<T extends ITypes> {
    me: MeResolver<T>;
    bookings: BookingsResolver<T>;
  }
}

export namespace IAuthPayload {
  export type TokenResolver<T extends ITypes> = ResolverFn<
    T[\\"AuthPayloadParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type UserResolver<T extends ITypes> = ResolverFn<
    T[\\"AuthPayloadParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"UserParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    token: TokenResolver<T>;
    user: UserResolver<T>;
  }
}

export namespace IMutationResult {
  export type SuccessResolver<T extends ITypes> = ResolverFn<
    T[\\"MutationResultParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export interface Resolver<T extends ITypes> {
    success: SuccessResolver<T>;
  }
}

export namespace IExperiencesByCity {
  export type ExperiencesResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperiencesByCityParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ExperienceParent\\"][]
  >;

  export type CityResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperiencesByCityParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"CityParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    experiences: ExperiencesResolver<T>;
    city: CityResolver<T>;
  }
}

export namespace IHome {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type NameResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    {},
    T[\\"Context\\"],
    string | null
  >;

  export type DescriptionResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type NumRatingsResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type AvgRatingResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export interface ArgsPictures {
    first: number | null;
  }

  export type PicturesResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    ArgsPictures,
    T[\\"Context\\"],
    T[\\"PictureParent\\"][]
  >;

  export type PerNightResolver<T extends ITypes> = ResolverFn<
    T[\\"HomeParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    name: NameResolver<T>;
    description: DescriptionResolver<T>;
    numRatings: NumRatingsResolver<T>;
    avgRating: AvgRatingResolver<T>;
    pictures: PicturesResolver<T>;
    perNight: PerNightResolver<T>;
  }
}

export namespace IReservation {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type TitleResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type AvgPricePerPersonResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type PicturesResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PictureParent\\"][]
  >;

  export type LocationResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"LocationParent\\"]
  >;

  export type IsCuratedResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type SlugResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type PopularityResolver<T extends ITypes> = ResolverFn<
    T[\\"ReservationParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    title: TitleResolver<T>;
    avgPricePerPerson: AvgPricePerPersonResolver<T>;
    pictures: PicturesResolver<T>;
    location: LocationResolver<T>;
    isCurated: IsCuratedResolver<T>;
    slug: SlugResolver<T>;
    popularity: PopularityResolver<T>;
  }
}

export namespace IExperience {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type CategoryResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ExperienceCategoryParent\\"] | null
  >;

  export type TitleResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LocationResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"LocationParent\\"]
  >;

  export type PricePerPersonResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type ReviewsResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ReviewParent\\"][]
  >;

  export type PreviewResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PictureParent\\"]
  >;

  export type PopularityResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    category: CategoryResolver<T>;
    title: TitleResolver<T>;
    location: LocationResolver<T>;
    pricePerPerson: PricePerPersonResolver<T>;
    reviews: ReviewsResolver<T>;
    preview: PreviewResolver<T>;
    popularity: PopularityResolver<T>;
  }
}

export namespace IReview {
  export type AccuracyResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CheckInResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CleanlinessResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CommunicationResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LocationResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type StarsResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type TextResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type ValueResolver<T extends ITypes> = ResolverFn<
    T[\\"ReviewParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    accuracy: AccuracyResolver<T>;
    checkIn: CheckInResolver<T>;
    cleanliness: CleanlinessResolver<T>;
    communication: CommunicationResolver<T>;
    createdAt: CreatedAtResolver<T>;
    id: IdResolver<T>;
    location: LocationResolver<T>;
    stars: StarsResolver<T>;
    text: TextResolver<T>;
    value: ValueResolver<T>;
  }
}

export namespace INeighbourhood {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type NameResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type SlugResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type HomePreviewResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PictureParent\\"] | null
  >;

  export type CityResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"CityParent\\"]
  >;

  export type FeaturedResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type PopularityResolver<T extends ITypes> = ResolverFn<
    T[\\"NeighbourhoodParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    name: NameResolver<T>;
    slug: SlugResolver<T>;
    homePreview: HomePreviewResolver<T>;
    city: CityResolver<T>;
    featured: FeaturedResolver<T>;
    popularity: PopularityResolver<T>;
  }
}

export namespace ILocation {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"LocationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LatResolver<T extends ITypes> = ResolverFn<
    T[\\"LocationParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type LngResolver<T extends ITypes> = ResolverFn<
    T[\\"LocationParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type AddressResolver<T extends ITypes> = ResolverFn<
    T[\\"LocationParent\\"],
    {},
    T[\\"Context\\"],
    string | null
  >;

  export type DirectionsResolver<T extends ITypes> = ResolverFn<
    T[\\"LocationParent\\"],
    {},
    T[\\"Context\\"],
    string | null
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    lat: LatResolver<T>;
    lng: LngResolver<T>;
    address: AddressResolver<T>;
    directions: DirectionsResolver<T>;
  }
}

export namespace IPicture {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PictureParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type UrlResolver<T extends ITypes> = ResolverFn<
    T[\\"PictureParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    url: UrlResolver<T>;
  }
}

export namespace ICity {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"CityParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type NameResolver<T extends ITypes> = ResolverFn<
    T[\\"CityParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    name: NameResolver<T>;
  }
}

export namespace IExperienceCategory {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceCategoryParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type MainColorResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceCategoryParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type NameResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceCategoryParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type ExperienceResolver<T extends ITypes> = ResolverFn<
    T[\\"ExperienceCategoryParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ExperienceParent\\"] | null
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    mainColor: MainColorResolver<T>;
    name: NameResolver<T>;
    experience: ExperienceResolver<T>;
  }
}

export namespace IUser {
  export type BookingsResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"BookingParent\\"][]
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type EmailResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type FirstNameResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type HostingExperiencesResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ExperienceParent\\"][]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type IsSuperHostResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type LastNameResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LocationResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"LocationParent\\"]
  >;

  export type NotificationsResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"NotificationParent\\"][]
  >;

  export type OwnedPlacesResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PlaceParent\\"][]
  >;

  export type PaymentAccountResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaymentAccountParent\\"][]
  >;

  export type PhoneResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type ProfilePictureResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PictureParent\\"] | null
  >;

  export type ReceivedMessagesResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"MessageParent\\"][]
  >;

  export type ResponseRateResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type ResponseTimeResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type SentMessagesResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"MessageParent\\"][]
  >;

  export type UpdatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type TokenResolver<T extends ITypes> = ResolverFn<
    T[\\"UserParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export interface Resolver<T extends ITypes> {
    bookings: BookingsResolver<T>;
    createdAt: CreatedAtResolver<T>;
    email: EmailResolver<T>;
    firstName: FirstNameResolver<T>;
    hostingExperiences: HostingExperiencesResolver<T>;
    id: IdResolver<T>;
    isSuperHost: IsSuperHostResolver<T>;
    lastName: LastNameResolver<T>;
    location: LocationResolver<T>;
    notifications: NotificationsResolver<T>;
    ownedPlaces: OwnedPlacesResolver<T>;
    paymentAccount: PaymentAccountResolver<T>;
    phone: PhoneResolver<T>;
    profilePicture: ProfilePictureResolver<T>;
    receivedMessages: ReceivedMessagesResolver<T>;
    responseRate: ResponseRateResolver<T>;
    responseTime: ResponseTimeResolver<T>;
    sentMessages: SentMessagesResolver<T>;
    updatedAt: UpdatedAtResolver<T>;
    token: TokenResolver<T>;
  }
}

export namespace IPaymentAccount {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type TypeResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PAYMENT_PROVIDERParent\\"] | null
  >;

  export type UserResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"UserParent\\"]
  >;

  export type PaymentsResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaymentParent\\"][]
  >;

  export type PaypalResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaypalInformationParent\\"] | null
  >;

  export type CreditcardResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentAccountParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"CreditCardInformationParent\\"] | null
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    createdAt: CreatedAtResolver<T>;
    type: TypeResolver<T>;
    user: UserResolver<T>;
    payments: PaymentsResolver<T>;
    paypal: PaypalResolver<T>;
    creditcard: CreditcardResolver<T>;
  }
}

export namespace IPlace {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type NameResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    string | null
  >;

  export type SizeResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PLACE_SIZESParent\\"] | null
  >;

  export type ShortDescriptionResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type DescriptionResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type SlugResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type MaxGuestsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type NumBedroomsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type NumBedsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type NumBathsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type ReviewsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"ReviewParent\\"][]
  >;

  export type AmenitiesResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"AmenitiesParent\\"]
  >;

  export type HostResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"UserParent\\"]
  >;

  export type PricingResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PricingParent\\"]
  >;

  export type LocationResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"LocationParent\\"]
  >;

  export type ViewsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PlaceViewsParent\\"]
  >;

  export type GuestRequirementsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"GuestRequirementsParent\\"] | null
  >;

  export type PoliciesResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PoliciesParent\\"] | null
  >;

  export type HouseRulesResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"HouseRulesParent\\"] | null
  >;

  export type BookingsResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"BookingParent\\"][]
  >;

  export type PicturesResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PictureParent\\"][]
  >;

  export type PopularityResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    name: NameResolver<T>;
    size: SizeResolver<T>;
    shortDescription: ShortDescriptionResolver<T>;
    description: DescriptionResolver<T>;
    slug: SlugResolver<T>;
    maxGuests: MaxGuestsResolver<T>;
    numBedrooms: NumBedroomsResolver<T>;
    numBeds: NumBedsResolver<T>;
    numBaths: NumBathsResolver<T>;
    reviews: ReviewsResolver<T>;
    amenities: AmenitiesResolver<T>;
    host: HostResolver<T>;
    pricing: PricingResolver<T>;
    location: LocationResolver<T>;
    views: ViewsResolver<T>;
    guestRequirements: GuestRequirementsResolver<T>;
    policies: PoliciesResolver<T>;
    houseRules: HouseRulesResolver<T>;
    bookings: BookingsResolver<T>;
    pictures: PicturesResolver<T>;
    popularity: PopularityResolver<T>;
  }
}

export namespace IBooking {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type BookeeResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"UserParent\\"]
  >;

  export type PlaceResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PlaceParent\\"]
  >;

  export type StartDateResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type EndDateResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type PaymentResolver<T extends ITypes> = ResolverFn<
    T[\\"BookingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaymentParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    createdAt: CreatedAtResolver<T>;
    bookee: BookeeResolver<T>;
    place: PlaceResolver<T>;
    startDate: StartDateResolver<T>;
    endDate: EndDateResolver<T>;
    payment: PaymentResolver<T>;
  }
}

export namespace INotification {
  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"NotificationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"NotificationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LinkResolver<T extends ITypes> = ResolverFn<
    T[\\"NotificationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type ReadDateResolver<T extends ITypes> = ResolverFn<
    T[\\"NotificationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type TypeResolver<T extends ITypes> = ResolverFn<
    T[\\"NotificationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"NOTIFICATION_TYPEParent\\"] | null
  >;

  export type UserResolver<T extends ITypes> = ResolverFn<
    T[\\"NotificationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"UserParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    createdAt: CreatedAtResolver<T>;
    id: IdResolver<T>;
    link: LinkResolver<T>;
    readDate: ReadDateResolver<T>;
    type: TypeResolver<T>;
    user: UserResolver<T>;
  }
}

export namespace IPayment {
  export type BookingResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"BookingParent\\"]
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type PaymentMethodResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaymentAccountParent\\"]
  >;

  export type ServiceFeeResolver<T extends ITypes> = ResolverFn<
    T[\\"PaymentParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    booking: BookingResolver<T>;
    createdAt: CreatedAtResolver<T>;
    id: IdResolver<T>;
    paymentMethod: PaymentMethodResolver<T>;
    serviceFee: ServiceFeeResolver<T>;
  }
}

export namespace IPaypalInformation {
  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"PaypalInformationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type EmailResolver<T extends ITypes> = ResolverFn<
    T[\\"PaypalInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PaypalInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type PaymentAccountResolver<T extends ITypes> = ResolverFn<
    T[\\"PaypalInformationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaymentAccountParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    createdAt: CreatedAtResolver<T>;
    email: EmailResolver<T>;
    id: IdResolver<T>;
    paymentAccount: PaymentAccountResolver<T>;
  }
}

export namespace ICreditCardInformation {
  export type CardNumberResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type CountryResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type ExpiresOnMonthResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type ExpiresOnYearResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type FirstNameResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LastNameResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type PaymentAccountResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"PaymentAccountParent\\"] | null
  >;

  export type PostalCodeResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type SecurityCodeResolver<T extends ITypes> = ResolverFn<
    T[\\"CreditCardInformationParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export interface Resolver<T extends ITypes> {
    cardNumber: CardNumberResolver<T>;
    country: CountryResolver<T>;
    createdAt: CreatedAtResolver<T>;
    expiresOnMonth: ExpiresOnMonthResolver<T>;
    expiresOnYear: ExpiresOnYearResolver<T>;
    firstName: FirstNameResolver<T>;
    id: IdResolver<T>;
    lastName: LastNameResolver<T>;
    paymentAccount: PaymentAccountResolver<T>;
    postalCode: PostalCodeResolver<T>;
    securityCode: SecurityCodeResolver<T>;
  }
}

export namespace IMessage {
  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"MessageParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type DeliveredAtResolver<T extends ITypes> = ResolverFn<
    T[\\"MessageParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"MessageParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type ReadAtResolver<T extends ITypes> = ResolverFn<
    T[\\"MessageParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    createdAt: CreatedAtResolver<T>;
    deliveredAt: DeliveredAtResolver<T>;
    id: IdResolver<T>;
    readAt: ReadAtResolver<T>;
  }
}

export namespace IPricing {
  export type AverageMonthlyResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type AverageWeeklyResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type BasePriceResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CleaningFeeResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type CurrencyResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"CURRENCYParent\\"] | null
  >;

  export type ExtraGuestsResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type MonthlyDiscountResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type PerNightResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type SecurityDepositResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type SmartPricingResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type WeekendPricingResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export type WeeklyDiscountResolver<T extends ITypes> = ResolverFn<
    T[\\"PricingParent\\"],
    {},
    T[\\"Context\\"],
    number | null
  >;

  export interface Resolver<T extends ITypes> {
    averageMonthly: AverageMonthlyResolver<T>;
    averageWeekly: AverageWeeklyResolver<T>;
    basePrice: BasePriceResolver<T>;
    cleaningFee: CleaningFeeResolver<T>;
    currency: CurrencyResolver<T>;
    extraGuests: ExtraGuestsResolver<T>;
    id: IdResolver<T>;
    monthlyDiscount: MonthlyDiscountResolver<T>;
    perNight: PerNightResolver<T>;
    securityDeposit: SecurityDepositResolver<T>;
    smartPricing: SmartPricingResolver<T>;
    weekendPricing: WeekendPricingResolver<T>;
    weeklyDiscount: WeeklyDiscountResolver<T>;
  }
}

export namespace IPlaceViews {
  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceViewsParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type LastWeekResolver<T extends ITypes> = ResolverFn<
    T[\\"PlaceViewsParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export interface Resolver<T extends ITypes> {
    id: IdResolver<T>;
    lastWeek: LastWeekResolver<T>;
  }
}

export namespace IGuestRequirements {
  export type GovIssuedIdResolver<T extends ITypes> = ResolverFn<
    T[\\"GuestRequirementsParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type GuestTripInformationResolver<T extends ITypes> = ResolverFn<
    T[\\"GuestRequirementsParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"GuestRequirementsParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type RecommendationsFromOtherHostsResolver<
    T extends ITypes
  > = ResolverFn<T[\\"GuestRequirementsParent\\"], {}, T[\\"Context\\"], boolean>;

  export interface Resolver<T extends ITypes> {
    govIssuedId: GovIssuedIdResolver<T>;
    guestTripInformation: GuestTripInformationResolver<T>;
    id: IdResolver<T>;
    recommendationsFromOtherHosts: RecommendationsFromOtherHostsResolver<T>;
  }
}

export namespace IPolicies {
  export type CheckInEndTimeResolver<T extends ITypes> = ResolverFn<
    T[\\"PoliciesParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CheckInStartTimeResolver<T extends ITypes> = ResolverFn<
    T[\\"PoliciesParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CheckoutTimeResolver<T extends ITypes> = ResolverFn<
    T[\\"PoliciesParent\\"],
    {},
    T[\\"Context\\"],
    number
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"PoliciesParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"PoliciesParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type UpdatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"PoliciesParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    checkInEndTime: CheckInEndTimeResolver<T>;
    checkInStartTime: CheckInStartTimeResolver<T>;
    checkoutTime: CheckoutTimeResolver<T>;
    createdAt: CreatedAtResolver<T>;
    id: IdResolver<T>;
    updatedAt: UpdatedAtResolver<T>;
  }
}

export namespace IHouseRules {
  export type AdditionalRulesResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    string | null
  >;

  export type CreatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type PartiesAndEventsAllowedResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    boolean | null
  >;

  export type PetsAllowedResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    boolean | null
  >;

  export type SmokingAllowedResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    boolean | null
  >;

  export type SuitableForChildrenResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    boolean | null
  >;

  export type SuitableForInfantsResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    boolean | null
  >;

  export type UpdatedAtResolver<T extends ITypes> = ResolverFn<
    T[\\"HouseRulesParent\\"],
    {},
    T[\\"Context\\"],
    T[\\"DateTimeParent\\"]
  >;

  export interface Resolver<T extends ITypes> {
    additionalRules: AdditionalRulesResolver<T>;
    createdAt: CreatedAtResolver<T>;
    id: IdResolver<T>;
    partiesAndEventsAllowed: PartiesAndEventsAllowedResolver<T>;
    petsAllowed: PetsAllowedResolver<T>;
    smokingAllowed: SmokingAllowedResolver<T>;
    suitableForChildren: SuitableForChildrenResolver<T>;
    suitableForInfants: SuitableForInfantsResolver<T>;
    updatedAt: UpdatedAtResolver<T>;
  }
}

export namespace IAmenities {
  export type AirConditioningResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type BabyBathResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type BabyMonitorResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type BabysitterRecommendationsResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type BathtubResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type BreakfastResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type BuzzerWirelessIntercomResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type CableTvResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type ChangingTableResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type ChildrensBooksAndToysResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type ChildrensDinnerwareResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type CribResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type DoormanResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type DryerResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type ElevatorResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type EssentialsResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type FamilyKidFriendlyResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type FreeParkingOnPremisesResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type FreeParkingOnStreetResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type GymResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type HairDryerResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type HangersResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type HeatingResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type HotTubResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type IdResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    string
  >;

  export type IndoorFireplaceResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type InternetResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type IronResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type KitchenResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type LaptopFriendlyWorkspaceResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type PaidParkingOffPremisesResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type PetsAllowedResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type PoolResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type PrivateEntranceResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type ShampooResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type SmokingAllowedResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type SuitableForEventsResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type TvResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type WasherResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type WheelchairAccessibleResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export type WirelessInternetResolver<T extends ITypes> = ResolverFn<
    T[\\"AmenitiesParent\\"],
    {},
    T[\\"Context\\"],
    boolean
  >;

  export interface Resolver<T extends ITypes> {
    airConditioning: AirConditioningResolver<T>;
    babyBath: BabyBathResolver<T>;
    babyMonitor: BabyMonitorResolver<T>;
    babysitterRecommendations: BabysitterRecommendationsResolver<T>;
    bathtub: BathtubResolver<T>;
    breakfast: BreakfastResolver<T>;
    buzzerWirelessIntercom: BuzzerWirelessIntercomResolver<T>;
    cableTv: CableTvResolver<T>;
    changingTable: ChangingTableResolver<T>;
    childrensBooksAndToys: ChildrensBooksAndToysResolver<T>;
    childrensDinnerware: ChildrensDinnerwareResolver<T>;
    crib: CribResolver<T>;
    doorman: DoormanResolver<T>;
    dryer: DryerResolver<T>;
    elevator: ElevatorResolver<T>;
    essentials: EssentialsResolver<T>;
    familyKidFriendly: FamilyKidFriendlyResolver<T>;
    freeParkingOnPremises: FreeParkingOnPremisesResolver<T>;
    freeParkingOnStreet: FreeParkingOnStreetResolver<T>;
    gym: GymResolver<T>;
    hairDryer: HairDryerResolver<T>;
    hangers: HangersResolver<T>;
    heating: HeatingResolver<T>;
    hotTub: HotTubResolver<T>;
    id: IdResolver<T>;
    indoorFireplace: IndoorFireplaceResolver<T>;
    internet: InternetResolver<T>;
    iron: IronResolver<T>;
    kitchen: KitchenResolver<T>;
    laptopFriendlyWorkspace: LaptopFriendlyWorkspaceResolver<T>;
    paidParkingOffPremises: PaidParkingOffPremisesResolver<T>;
    petsAllowed: PetsAllowedResolver<T>;
    pool: PoolResolver<T>;
    privateEntrance: PrivateEntranceResolver<T>;
    shampoo: ShampooResolver<T>;
    smokingAllowed: SmokingAllowedResolver<T>;
    suitableForEvents: SuitableForEventsResolver<T>;
    tv: TvResolver<T>;
    washer: WasherResolver<T>;
    wheelchairAccessible: WheelchairAccessibleResolver<T>;
    wirelessInternet: WirelessInternetResolver<T>;
  }
}

export interface IResolvers<T extends ITypes> {
  Query: IQuery.Resolver<T>;
  Mutation: IMutation.Resolver<T>;
  Viewer: IViewer.Resolver<T>;
  AuthPayload: IAuthPayload.Resolver<T>;
  MutationResult: IMutationResult.Resolver<T>;
  ExperiencesByCity: IExperiencesByCity.Resolver<T>;
  Home: IHome.Resolver<T>;
  Reservation: IReservation.Resolver<T>;
  Experience: IExperience.Resolver<T>;
  Review: IReview.Resolver<T>;
  Neighbourhood: INeighbourhood.Resolver<T>;
  Location: ILocation.Resolver<T>;
  Picture: IPicture.Resolver<T>;
  City: ICity.Resolver<T>;
  ExperienceCategory: IExperienceCategory.Resolver<T>;
  User: IUser.Resolver<T>;
  PaymentAccount: IPaymentAccount.Resolver<T>;
  Place: IPlace.Resolver<T>;
  Booking: IBooking.Resolver<T>;
  Notification: INotification.Resolver<T>;
  Payment: IPayment.Resolver<T>;
  PaypalInformation: IPaypalInformation.Resolver<T>;
  CreditCardInformation: ICreditCardInformation.Resolver<T>;
  Message: IMessage.Resolver<T>;
  Pricing: IPricing.Resolver<T>;
  PlaceViews: IPlaceViews.Resolver<T>;
  GuestRequirements: IGuestRequirements.Resolver<T>;
  Policies: IPolicies.Resolver<T>;
  HouseRules: IHouseRules.Resolver<T>;
  Amenities: IAmenities.Resolver<T>;
}
"
`;
