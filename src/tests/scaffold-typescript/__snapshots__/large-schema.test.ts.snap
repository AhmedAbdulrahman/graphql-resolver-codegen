// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`large schema 1`] = `
Array [
  Object {
    "code": "import { IQuery } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { ExperienceRoot } from \\"./Experience\\";
import { HomeRoot } from \\"./Home\\";
import { ReservationRoot } from \\"./Reservation\\";
import { NeighbourhoodRoot } from \\"./Neighbourhood\\";
import { ExperiencesByCityRoot } from \\"./ExperiencesByCity\\";
import { ViewerRoot } from \\"./Viewer\\";
import { LocationRoot } from \\"./Location\\";

export interface QueryRoot {
  topExperiences: ExperienceRoot[];
  topHomes: HomeRoot[];
  homesInPriceRange: HomeRoot[];
  topReservations: ReservationRoot[];
  featuredDestinations: NeighbourhoodRoot[];
  experiencesByCity: ExperiencesByCityRoot[];
  viewer: ViewerRoot;
  myLocation: LocationRoot;
}

export const Query: IQuery.Resolver<Types> = {
  topExperiences: async root => root.topExperiences,
  topHomes: async root => root.topHomes,
  homesInPriceRange: async (root, args) => root.homesInPriceRange,
  topReservations: async root => root.topReservations,
  featuredDestinations: async root => root.featuredDestinations,
  experiencesByCity: async (root, args) => root.experiencesByCity,
  viewer: async root => root.viewer,
  myLocation: async root => root.myLocation
};
",
    "path": "Query.ts",
  },
  Object {
    "code": "import { IMutation } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { AuthPayloadRoot } from \\"./AuthPayload\\";
import { MutationResultRoot } from \\"./MutationResult\\";

export interface MutationRoot {
  signup: AuthPayloadRoot;
  login: AuthPayloadRoot;
  addPaymentMethod: MutationResultRoot;
  book: MutationResultRoot;
}

export const Mutation: IMutation.Resolver<Types> = {
  signup: async (root, args) => root.signup,
  login: async (root, args) => root.login,
  addPaymentMethod: async (root, args) => root.addPaymentMethod,
  book: async (root, args) => root.book
};
",
    "path": "Mutation.ts",
  },
  Object {
    "code": "import { IViewer } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { UserRoot } from \\"./User\\";
import { BookingRoot } from \\"./Booking\\";

export interface ViewerRoot {
  me: UserRoot;
  bookings: BookingRoot[];
}

export const Viewer: IViewer.Resolver<Types> = {
  me: async root => root.me,
  bookings: async root => root.bookings
};
",
    "path": "Viewer.ts",
  },
  Object {
    "code": "import { IAuthPayload } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { UserRoot } from \\"./User\\";

export interface AuthPayloadRoot {
  token: string;
  user: UserRoot;
}

export const AuthPayload: IAuthPayload.Resolver<Types> = {
  token: async root => root.token,
  user: async root => root.user
};
",
    "path": "AuthPayload.ts",
  },
  Object {
    "code": "import { IMutationResult } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface MutationResultRoot {
  success: boolean;
}

export const MutationResult: IMutationResult.Resolver<Types> = {
  success: async root => root.success
};
",
    "path": "MutationResult.ts",
  },
  Object {
    "code": "import { IExperiencesByCity } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { ExperienceRoot } from \\"./Experience\\";
import { CityRoot } from \\"./City\\";

export interface ExperiencesByCityRoot {
  experiences: ExperienceRoot[];
  city: CityRoot;
}

export const ExperiencesByCity: IExperiencesByCity.Resolver<Types> = {
  experiences: async root => root.experiences,
  city: async root => root.city
};
",
    "path": "ExperiencesByCity.ts",
  },
  Object {
    "code": "import { IHome } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PictureRoot } from \\"./Picture\\";

export interface HomeRoot {
  id: string;
  name: string;
  description: string;
  numRatings: number;
  avgRating: number;
  pictures: PictureRoot[];
  perNight: number;
}

export const Home: IHome.Resolver<Types> = {
  id: async root => root.id,
  name: async root => root.name,
  description: async root => root.description,
  numRatings: async root => root.numRatings,
  avgRating: async root => root.avgRating,
  pictures: async (root, args) => root.pictures,
  perNight: async root => root.perNight
};
",
    "path": "Home.ts",
  },
  Object {
    "code": "import { IReservation } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PictureRoot } from \\"./Picture\\";
import { LocationRoot } from \\"./Location\\";

export interface ReservationRoot {
  id: string;
  title: string;
  avgPricePerPerson: number;
  pictures: PictureRoot[];
  location: LocationRoot;
  isCurated: boolean;
  slug: string;
  popularity: number;
}

export const Reservation: IReservation.Resolver<Types> = {
  id: async root => root.id,
  title: async root => root.title,
  avgPricePerPerson: async root => root.avgPricePerPerson,
  pictures: async root => root.pictures,
  location: async root => root.location,
  isCurated: async root => root.isCurated,
  slug: async root => root.slug,
  popularity: async root => root.popularity
};
",
    "path": "Reservation.ts",
  },
  Object {
    "code": "import { IExperience } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { ExperienceCategoryRoot } from \\"./ExperienceCategory\\";
import { LocationRoot } from \\"./Location\\";
import { ReviewRoot } from \\"./Review\\";
import { PictureRoot } from \\"./Picture\\";

export interface ExperienceRoot {
  id: string;
  category: ExperienceCategoryRoot;
  title: string;
  location: LocationRoot;
  pricePerPerson: number;
  reviews: ReviewRoot[];
  preview: PictureRoot;
  popularity: number;
}

export const Experience: IExperience.Resolver<Types> = {
  id: async root => root.id,
  category: async root => root.category,
  title: async root => root.title,
  location: async root => root.location,
  pricePerPerson: async root => root.pricePerPerson,
  reviews: async root => root.reviews,
  preview: async root => root.preview,
  popularity: async root => root.popularity
};
",
    "path": "Experience.ts",
  },
  Object {
    "code": "import { IReview } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface ReviewRoot {
  accuracy: number;
  checkIn: number;
  cleanliness: number;
  communication: number;
  createdAt: string;
  id: string;
  location: number;
  stars: number;
  text: string;
  value: number;
}

export const Review: IReview.Resolver<Types> = {
  accuracy: async root => root.accuracy,
  checkIn: async root => root.checkIn,
  cleanliness: async root => root.cleanliness,
  communication: async root => root.communication,
  createdAt: async root => root.createdAt,
  id: async root => root.id,
  location: async root => root.location,
  stars: async root => root.stars,
  text: async root => root.text,
  value: async root => root.value
};
",
    "path": "Review.ts",
  },
  Object {
    "code": "import { INeighbourhood } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PictureRoot } from \\"./Picture\\";
import { CityRoot } from \\"./City\\";

export interface NeighbourhoodRoot {
  id: string;
  name: string;
  slug: string;
  homePreview: PictureRoot;
  city: CityRoot;
  featured: boolean;
  popularity: number;
}

export const Neighbourhood: INeighbourhood.Resolver<Types> = {
  id: async root => root.id,
  name: async root => root.name,
  slug: async root => root.slug,
  homePreview: async root => root.homePreview,
  city: async root => root.city,
  featured: async root => root.featured,
  popularity: async root => root.popularity
};
",
    "path": "Neighbourhood.ts",
  },
  Object {
    "code": "import { ILocation } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface LocationRoot {
  id: string;
  lat: number;
  lng: number;
  address: string;
  directions: string;
}

export const Location: ILocation.Resolver<Types> = {
  id: async root => root.id,
  lat: async root => root.lat,
  lng: async root => root.lng,
  address: async root => root.address,
  directions: async root => root.directions
};
",
    "path": "Location.ts",
  },
  Object {
    "code": "import { IPicture } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface PictureRoot {
  id: string;
  url: string;
}

export const Picture: IPicture.Resolver<Types> = {
  id: async root => root.id,
  url: async root => root.url
};
",
    "path": "Picture.ts",
  },
  Object {
    "code": "import { ICity } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface CityRoot {
  id: string;
  name: string;
}

export const City: ICity.Resolver<Types> = {
  id: async root => root.id,
  name: async root => root.name
};
",
    "path": "City.ts",
  },
  Object {
    "code": "import { IExperienceCategory } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { ExperienceRoot } from \\"./Experience\\";

export interface ExperienceCategoryRoot {
  id: string;
  mainColor: string;
  name: string;
  experience: ExperienceRoot;
}

export const ExperienceCategory: IExperienceCategory.Resolver<Types> = {
  id: async root => root.id,
  mainColor: async root => root.mainColor,
  name: async root => root.name,
  experience: async root => root.experience
};
",
    "path": "ExperienceCategory.ts",
  },
  Object {
    "code": "import { IUser } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { BookingRoot } from \\"./Booking\\";
import { ExperienceRoot } from \\"./Experience\\";
import { LocationRoot } from \\"./Location\\";
import { NotificationRoot } from \\"./Notification\\";
import { PlaceRoot } from \\"./Place\\";
import { PaymentAccountRoot } from \\"./PaymentAccount\\";
import { PictureRoot } from \\"./Picture\\";
import { MessageRoot } from \\"./Message\\";

export interface UserRoot {
  bookings: BookingRoot[];
  createdAt: string;
  email: string;
  firstName: string;
  hostingExperiences: ExperienceRoot[];
  id: string;
  isSuperHost: boolean;
  lastName: string;
  location: LocationRoot;
  notifications: NotificationRoot[];
  ownedPlaces: PlaceRoot[];
  paymentAccount: PaymentAccountRoot[];
  phone: string;
  profilePicture: PictureRoot;
  receivedMessages: MessageRoot[];
  responseRate: number;
  responseTime: number;
  sentMessages: MessageRoot[];
  updatedAt: string;
  token: string;
}

export const User: IUser.Resolver<Types> = {
  bookings: async root => root.bookings,
  createdAt: async root => root.createdAt,
  email: async root => root.email,
  firstName: async root => root.firstName,
  hostingExperiences: async root => root.hostingExperiences,
  id: async root => root.id,
  isSuperHost: async root => root.isSuperHost,
  lastName: async root => root.lastName,
  location: async root => root.location,
  notifications: async root => root.notifications,
  ownedPlaces: async root => root.ownedPlaces,
  paymentAccount: async root => root.paymentAccount,
  phone: async root => root.phone,
  profilePicture: async root => root.profilePicture,
  receivedMessages: async root => root.receivedMessages,
  responseRate: async root => root.responseRate,
  responseTime: async root => root.responseTime,
  sentMessages: async root => root.sentMessages,
  updatedAt: async root => root.updatedAt,
  token: async root => root.token
};
",
    "path": "User.ts",
  },
  Object {
    "code": "import { IPaymentAccount } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PAYMENT_PROVIDERRoot } from \\"./PAYMENT_PROVIDER\\";
import { UserRoot } from \\"./User\\";
import { PaymentRoot } from \\"./Payment\\";
import { PaypalInformationRoot } from \\"./PaypalInformation\\";
import { CreditCardInformationRoot } from \\"./CreditCardInformation\\";

export interface PaymentAccountRoot {
  id: string;
  createdAt: string;
  type: PAYMENT_PROVIDERRoot;
  user: UserRoot;
  payments: PaymentRoot[];
  paypal: PaypalInformationRoot;
  creditcard: CreditCardInformationRoot;
}

export const PaymentAccount: IPaymentAccount.Resolver<Types> = {
  id: async root => root.id,
  createdAt: async root => root.createdAt,
  type: async root => root.type,
  user: async root => root.user,
  payments: async root => root.payments,
  paypal: async root => root.paypal,
  creditcard: async root => root.creditcard
};
",
    "path": "PaymentAccount.ts",
  },
  Object {
    "code": "import { IPlace } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PLACE_SIZESRoot } from \\"./PLACE_SIZES\\";
import { ReviewRoot } from \\"./Review\\";
import { AmenitiesRoot } from \\"./Amenities\\";
import { UserRoot } from \\"./User\\";
import { PricingRoot } from \\"./Pricing\\";
import { LocationRoot } from \\"./Location\\";
import { PlaceViewsRoot } from \\"./PlaceViews\\";
import { GuestRequirementsRoot } from \\"./GuestRequirements\\";
import { PoliciesRoot } from \\"./Policies\\";
import { HouseRulesRoot } from \\"./HouseRules\\";
import { BookingRoot } from \\"./Booking\\";
import { PictureRoot } from \\"./Picture\\";

export interface PlaceRoot {
  id: string;
  name: string;
  size: PLACE_SIZESRoot;
  shortDescription: string;
  description: string;
  slug: string;
  maxGuests: number;
  numBedrooms: number;
  numBeds: number;
  numBaths: number;
  reviews: ReviewRoot[];
  amenities: AmenitiesRoot;
  host: UserRoot;
  pricing: PricingRoot;
  location: LocationRoot;
  views: PlaceViewsRoot;
  guestRequirements: GuestRequirementsRoot;
  policies: PoliciesRoot;
  houseRules: HouseRulesRoot;
  bookings: BookingRoot[];
  pictures: PictureRoot[];
  popularity: number;
}

export const Place: IPlace.Resolver<Types> = {
  id: async root => root.id,
  name: async root => root.name,
  size: async root => root.size,
  shortDescription: async root => root.shortDescription,
  description: async root => root.description,
  slug: async root => root.slug,
  maxGuests: async root => root.maxGuests,
  numBedrooms: async root => root.numBedrooms,
  numBeds: async root => root.numBeds,
  numBaths: async root => root.numBaths,
  reviews: async root => root.reviews,
  amenities: async root => root.amenities,
  host: async root => root.host,
  pricing: async root => root.pricing,
  location: async root => root.location,
  views: async root => root.views,
  guestRequirements: async root => root.guestRequirements,
  policies: async root => root.policies,
  houseRules: async root => root.houseRules,
  bookings: async root => root.bookings,
  pictures: async root => root.pictures,
  popularity: async root => root.popularity
};
",
    "path": "Place.ts",
  },
  Object {
    "code": "import { IBooking } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { UserRoot } from \\"./User\\";
import { PlaceRoot } from \\"./Place\\";
import { PaymentRoot } from \\"./Payment\\";

export interface BookingRoot {
  id: string;
  createdAt: string;
  bookee: UserRoot;
  place: PlaceRoot;
  startDate: string;
  endDate: string;
  payment: PaymentRoot;
}

export const Booking: IBooking.Resolver<Types> = {
  id: async root => root.id,
  createdAt: async root => root.createdAt,
  bookee: async root => root.bookee,
  place: async root => root.place,
  startDate: async root => root.startDate,
  endDate: async root => root.endDate,
  payment: async root => root.payment
};
",
    "path": "Booking.ts",
  },
  Object {
    "code": "import { INotification } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { NOTIFICATION_TYPERoot } from \\"./NOTIFICATION_TYPE\\";
import { UserRoot } from \\"./User\\";

export interface NotificationRoot {
  createdAt: string;
  id: string;
  link: string;
  readDate: string;
  type: NOTIFICATION_TYPERoot;
  user: UserRoot;
}

export const Notification: INotification.Resolver<Types> = {
  createdAt: async root => root.createdAt,
  id: async root => root.id,
  link: async root => root.link,
  readDate: async root => root.readDate,
  type: async root => root.type,
  user: async root => root.user
};
",
    "path": "Notification.ts",
  },
  Object {
    "code": "import { IPayment } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { BookingRoot } from \\"./Booking\\";
import { PaymentAccountRoot } from \\"./PaymentAccount\\";

export interface PaymentRoot {
  booking: BookingRoot;
  createdAt: string;
  id: string;
  paymentMethod: PaymentAccountRoot;
  serviceFee: number;
}

export const Payment: IPayment.Resolver<Types> = {
  booking: async root => root.booking,
  createdAt: async root => root.createdAt,
  id: async root => root.id,
  paymentMethod: async root => root.paymentMethod,
  serviceFee: async root => root.serviceFee
};
",
    "path": "Payment.ts",
  },
  Object {
    "code": "import { IPaypalInformation } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PaymentAccountRoot } from \\"./PaymentAccount\\";

export interface PaypalInformationRoot {
  createdAt: string;
  email: string;
  id: string;
  paymentAccount: PaymentAccountRoot;
}

export const PaypalInformation: IPaypalInformation.Resolver<Types> = {
  createdAt: async root => root.createdAt,
  email: async root => root.email,
  id: async root => root.id,
  paymentAccount: async root => root.paymentAccount
};
",
    "path": "PaypalInformation.ts",
  },
  Object {
    "code": "import { ICreditCardInformation } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { PaymentAccountRoot } from \\"./PaymentAccount\\";

export interface CreditCardInformationRoot {
  cardNumber: string;
  country: string;
  createdAt: string;
  expiresOnMonth: number;
  expiresOnYear: number;
  firstName: string;
  id: string;
  lastName: string;
  paymentAccount: PaymentAccountRoot;
  postalCode: string;
  securityCode: string;
}

export const CreditCardInformation: ICreditCardInformation.Resolver<Types> = {
  cardNumber: async root => root.cardNumber,
  country: async root => root.country,
  createdAt: async root => root.createdAt,
  expiresOnMonth: async root => root.expiresOnMonth,
  expiresOnYear: async root => root.expiresOnYear,
  firstName: async root => root.firstName,
  id: async root => root.id,
  lastName: async root => root.lastName,
  paymentAccount: async root => root.paymentAccount,
  postalCode: async root => root.postalCode,
  securityCode: async root => root.securityCode
};
",
    "path": "CreditCardInformation.ts",
  },
  Object {
    "code": "import { IMessage } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface MessageRoot {
  createdAt: string;
  deliveredAt: string;
  id: string;
  readAt: string;
}

export const Message: IMessage.Resolver<Types> = {
  createdAt: async root => root.createdAt,
  deliveredAt: async root => root.deliveredAt,
  id: async root => root.id,
  readAt: async root => root.readAt
};
",
    "path": "Message.ts",
  },
  Object {
    "code": "import { IPricing } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { CURRENCYRoot } from \\"./CURRENCY\\";

export interface PricingRoot {
  averageMonthly: number;
  averageWeekly: number;
  basePrice: number;
  cleaningFee: number;
  currency: CURRENCYRoot;
  extraGuests: number;
  id: string;
  monthlyDiscount: number;
  perNight: number;
  securityDeposit: number;
  smartPricing: boolean;
  weekendPricing: number;
  weeklyDiscount: number;
}

export const Pricing: IPricing.Resolver<Types> = {
  averageMonthly: async root => root.averageMonthly,
  averageWeekly: async root => root.averageWeekly,
  basePrice: async root => root.basePrice,
  cleaningFee: async root => root.cleaningFee,
  currency: async root => root.currency,
  extraGuests: async root => root.extraGuests,
  id: async root => root.id,
  monthlyDiscount: async root => root.monthlyDiscount,
  perNight: async root => root.perNight,
  securityDeposit: async root => root.securityDeposit,
  smartPricing: async root => root.smartPricing,
  weekendPricing: async root => root.weekendPricing,
  weeklyDiscount: async root => root.weeklyDiscount
};
",
    "path": "Pricing.ts",
  },
  Object {
    "code": "import { IPlaceViews } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface PlaceViewsRoot {
  id: string;
  lastWeek: number;
}

export const PlaceViews: IPlaceViews.Resolver<Types> = {
  id: async root => root.id,
  lastWeek: async root => root.lastWeek
};
",
    "path": "PlaceViews.ts",
  },
  Object {
    "code": "import { IGuestRequirements } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface GuestRequirementsRoot {
  govIssuedId: boolean;
  guestTripInformation: boolean;
  id: string;
  recommendationsFromOtherHosts: boolean;
}

export const GuestRequirements: IGuestRequirements.Resolver<Types> = {
  govIssuedId: async root => root.govIssuedId,
  guestTripInformation: async root => root.guestTripInformation,
  id: async root => root.id,
  recommendationsFromOtherHosts: async root =>
    root.recommendationsFromOtherHosts
};
",
    "path": "GuestRequirements.ts",
  },
  Object {
    "code": "import { IPolicies } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface PoliciesRoot {
  checkInEndTime: number;
  checkInStartTime: number;
  checkoutTime: number;
  createdAt: string;
  id: string;
  updatedAt: string;
}

export const Policies: IPolicies.Resolver<Types> = {
  checkInEndTime: async root => root.checkInEndTime,
  checkInStartTime: async root => root.checkInStartTime,
  checkoutTime: async root => root.checkoutTime,
  createdAt: async root => root.createdAt,
  id: async root => root.id,
  updatedAt: async root => root.updatedAt
};
",
    "path": "Policies.ts",
  },
  Object {
    "code": "import { IHouseRules } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface HouseRulesRoot {
  additionalRules: string;
  createdAt: string;
  id: string;
  partiesAndEventsAllowed: boolean;
  petsAllowed: boolean;
  smokingAllowed: boolean;
  suitableForChildren: boolean;
  suitableForInfants: boolean;
  updatedAt: string;
}

export const HouseRules: IHouseRules.Resolver<Types> = {
  additionalRules: async root => root.additionalRules,
  createdAt: async root => root.createdAt,
  id: async root => root.id,
  partiesAndEventsAllowed: async root => root.partiesAndEventsAllowed,
  petsAllowed: async root => root.petsAllowed,
  smokingAllowed: async root => root.smokingAllowed,
  suitableForChildren: async root => root.suitableForChildren,
  suitableForInfants: async root => root.suitableForInfants,
  updatedAt: async root => root.updatedAt
};
",
    "path": "HouseRules.ts",
  },
  Object {
    "code": "import { IAmenities } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface AmenitiesRoot {
  airConditioning: boolean;
  babyBath: boolean;
  babyMonitor: boolean;
  babysitterRecommendations: boolean;
  bathtub: boolean;
  breakfast: boolean;
  buzzerWirelessIntercom: boolean;
  cableTv: boolean;
  changingTable: boolean;
  childrensBooksAndToys: boolean;
  childrensDinnerware: boolean;
  crib: boolean;
  doorman: boolean;
  dryer: boolean;
  elevator: boolean;
  essentials: boolean;
  familyKidFriendly: boolean;
  freeParkingOnPremises: boolean;
  freeParkingOnStreet: boolean;
  gym: boolean;
  hairDryer: boolean;
  hangers: boolean;
  heating: boolean;
  hotTub: boolean;
  id: string;
  indoorFireplace: boolean;
  internet: boolean;
  iron: boolean;
  kitchen: boolean;
  laptopFriendlyWorkspace: boolean;
  paidParkingOffPremises: boolean;
  petsAllowed: boolean;
  pool: boolean;
  privateEntrance: boolean;
  shampoo: boolean;
  smokingAllowed: boolean;
  suitableForEvents: boolean;
  tv: boolean;
  washer: boolean;
  wheelchairAccessible: boolean;
  wirelessInternet: boolean;
}

export const Amenities: IAmenities.Resolver<Types> = {
  airConditioning: async root => root.airConditioning,
  babyBath: async root => root.babyBath,
  babyMonitor: async root => root.babyMonitor,
  babysitterRecommendations: async root => root.babysitterRecommendations,
  bathtub: async root => root.bathtub,
  breakfast: async root => root.breakfast,
  buzzerWirelessIntercom: async root => root.buzzerWirelessIntercom,
  cableTv: async root => root.cableTv,
  changingTable: async root => root.changingTable,
  childrensBooksAndToys: async root => root.childrensBooksAndToys,
  childrensDinnerware: async root => root.childrensDinnerware,
  crib: async root => root.crib,
  doorman: async root => root.doorman,
  dryer: async root => root.dryer,
  elevator: async root => root.elevator,
  essentials: async root => root.essentials,
  familyKidFriendly: async root => root.familyKidFriendly,
  freeParkingOnPremises: async root => root.freeParkingOnPremises,
  freeParkingOnStreet: async root => root.freeParkingOnStreet,
  gym: async root => root.gym,
  hairDryer: async root => root.hairDryer,
  hangers: async root => root.hangers,
  heating: async root => root.heating,
  hotTub: async root => root.hotTub,
  id: async root => root.id,
  indoorFireplace: async root => root.indoorFireplace,
  internet: async root => root.internet,
  iron: async root => root.iron,
  kitchen: async root => root.kitchen,
  laptopFriendlyWorkspace: async root => root.laptopFriendlyWorkspace,
  paidParkingOffPremises: async root => root.paidParkingOffPremises,
  petsAllowed: async root => root.petsAllowed,
  pool: async root => root.pool,
  privateEntrance: async root => root.privateEntrance,
  shampoo: async root => root.shampoo,
  smokingAllowed: async root => root.smokingAllowed,
  suitableForEvents: async root => root.suitableForEvents,
  tv: async root => root.tv,
  washer: async root => root.washer,
  wheelchairAccessible: async root => root.wheelchairAccessible,
  wirelessInternet: async root => root.wirelessInternet
};
",
    "path": "Amenities.ts",
  },
  Object {
    "code": "import { ITypes } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { QueryRoot } from \\"./Query\\";

import { MutationRoot } from \\"./Mutation\\";

import { ViewerRoot } from \\"./Viewer\\";

import { AuthPayloadRoot } from \\"./AuthPayload\\";

import { MutationResultRoot } from \\"./MutationResult\\";

import { ExperiencesByCityRoot } from \\"./ExperiencesByCity\\";

import { HomeRoot } from \\"./Home\\";

import { ReservationRoot } from \\"./Reservation\\";

import { ExperienceRoot } from \\"./Experience\\";

import { ReviewRoot } from \\"./Review\\";

import { NeighbourhoodRoot } from \\"./Neighbourhood\\";

import { LocationRoot } from \\"./Location\\";

import { PictureRoot } from \\"./Picture\\";

import { CityRoot } from \\"./City\\";

import { ExperienceCategoryRoot } from \\"./ExperienceCategory\\";

import { UserRoot } from \\"./User\\";

import { PaymentAccountRoot } from \\"./PaymentAccount\\";

import { PlaceRoot } from \\"./Place\\";

import { BookingRoot } from \\"./Booking\\";

import { NotificationRoot } from \\"./Notification\\";

import { PaymentRoot } from \\"./Payment\\";

import { PaypalInformationRoot } from \\"./PaypalInformation\\";

import { CreditCardInformationRoot } from \\"./CreditCardInformation\\";

import { MessageRoot } from \\"./Message\\";

import { PricingRoot } from \\"./Pricing\\";

import { PlaceViewsRoot } from \\"./PlaceViews\\";

import { GuestRequirementsRoot } from \\"./GuestRequirements\\";

import { PoliciesRoot } from \\"./Policies\\";

import { HouseRulesRoot } from \\"./HouseRules\\";

import { AmenitiesRoot } from \\"./Amenities\\";

export interface Context {
  db: any;
  request: any;
}

export interface Types extends ITypes {
  Context: Context;

  QueryRoot: QueryRoot;

  MutationRoot: MutationRoot;

  ViewerRoot: ViewerRoot;

  AuthPayloadRoot: AuthPayloadRoot;

  MutationResultRoot: MutationResultRoot;

  ExperiencesByCityRoot: ExperiencesByCityRoot;

  HomeRoot: HomeRoot;

  ReservationRoot: ReservationRoot;

  ExperienceRoot: ExperienceRoot;

  ReviewRoot: ReviewRoot;

  NeighbourhoodRoot: NeighbourhoodRoot;

  LocationRoot: LocationRoot;

  PictureRoot: PictureRoot;

  CityRoot: CityRoot;

  ExperienceCategoryRoot: ExperienceCategoryRoot;

  UserRoot: UserRoot;

  PaymentAccountRoot: PaymentAccountRoot;

  PlaceRoot: PlaceRoot;

  BookingRoot: BookingRoot;

  NotificationRoot: NotificationRoot;

  PaymentRoot: PaymentRoot;

  PaypalInformationRoot: PaypalInformationRoot;

  CreditCardInformationRoot: CreditCardInformationRoot;

  MessageRoot: MessageRoot;

  PricingRoot: PricingRoot;

  PlaceViewsRoot: PlaceViewsRoot;

  GuestRequirementsRoot: GuestRequirementsRoot;

  PoliciesRoot: PoliciesRoot;

  HouseRulesRoot: HouseRulesRoot;

  AmenitiesRoot: AmenitiesRoot;
}
",
    "path": "types.ts",
  },
]
`;
