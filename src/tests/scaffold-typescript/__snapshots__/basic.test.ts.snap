// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
Array [
  Object {
    "code": "import { IUser } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export type UserType = \\"ADMIN\\" | \\"EDITOR\\" | \\"COLLABORATOR\\";

export interface UserRoot {
  id: string;
  name: string;
  type: UserType;
}

export const User: IUser.Resolver<Types> = {
  id: root => root.id,
  name: root => root.name,
  type: root => root.type
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "export interface Context {
  db: any;
  request: any;
}
",
    "force": false,
    "path": "Context.ts",
  },
  Object {
    "code": "import { ITypes } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { UserRoot } from \\"./User\\";

import { Context } from \\"./Context\\";

export interface Types extends ITypes {
  Context: Context;
  UserRoot: UserRoot;
}
",
    "force": true,
    "path": "typemap.ts",
  },
  Object {
    "code": "import { IResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { User } from \\"./User\\";

export const resolvers: IResolvers<Types> = {
  User
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic schema 1`] = `
Array [
  Object {
    "code": "import { INumber } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface NumberRoot {
  id?: string;
  value?: number;
}

export const Number: INumber.Resolver<Types> = {
  id: root => root.id,
  value: root => root.value
};
",
    "force": false,
    "path": "Number.ts",
  },
  Object {
    "code": "import { IQuery } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface QueryRoot {}

export const Query: IQuery.Resolver<Types> = {
  id: root => null,
  custom_required: root => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: root => null,
  custom_array_nullable: root => null,
  custom_array_required: root => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (root, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (root, args) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: root => false,
  scalar_nullable: root => null,
  scalar_array_nullable: root => null,
  scalar_array_required: root => [],
  scalar_with_arg: (root, args) => false,
  scalar_with_custom_arg: (root, args) => false
};
",
    "force": false,
    "path": "Query.ts",
  },
  Object {
    "code": "export interface Context {
  db: any;
  request: any;
}
",
    "force": false,
    "path": "Context.ts",
  },
  Object {
    "code": "import { ITypes } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { QueryRoot } from \\"./Query\\";
import { NumberRoot } from \\"./Number\\";

import { Context } from \\"./Context\\";

export interface Types extends ITypes {
  Context: Context;
  QueryRoot: QueryRoot;
  NumberRoot: NumberRoot;
}
",
    "force": true,
    "path": "typemap.ts",
  },
  Object {
    "code": "import { IResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: IResolvers<Types> = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;

exports[`basic union 1`] = `
Array [
  Object {
    "code": "import { IUser } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { StudentRoot } from \\"./Student\\";
import { ProfessorRoot } from \\"./Professor\\";

export type UserType = StudentRoot | ProfessorRoot;

export interface UserRoot {
  id: string;
  name: string;
  type: UserType;
}

export const User: IUser.Resolver<Types> = {
  id: root => root.id,
  name: root => root.name,
  type: root => root.type
};
",
    "force": false,
    "path": "User.ts",
  },
  Object {
    "code": "import { IStudent } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface StudentRoot {
  age: number;
}

export const Student: IStudent.Resolver<Types> = {
  age: root => root.age
};
",
    "force": false,
    "path": "Student.ts",
  },
  Object {
    "code": "import { IProfessor } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

export interface ProfessorRoot {
  degree?: string;
}

export const Professor: IProfessor.Resolver<Types> = {
  degree: root => root.degree
};
",
    "force": false,
    "path": "Professor.ts",
  },
  Object {
    "code": "export interface Context {
  db: any;
  request: any;
}
",
    "force": false,
    "path": "Context.ts",
  },
  Object {
    "code": "import { ITypes } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { UserRoot } from \\"./User\\";
import { StudentRoot } from \\"./Student\\";
import { ProfessorRoot } from \\"./Professor\\";

import { Context } from \\"./Context\\";

export interface Types extends ITypes {
  Context: Context;
  UserRoot: UserRoot;
  StudentRoot: StudentRoot;
  ProfessorRoot: ProfessorRoot;
}
",
    "force": true,
    "path": "typemap.ts",
  },
  Object {
    "code": "import { IResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import { Types } from \\"./types\\";

import { User } from \\"./User\\";
import { Student } from \\"./Student\\";
import { Professor } from \\"./Professor\\";

export const resolvers: IResolvers<Types> = {
  User,
  Student,
  Professor
};
",
    "force": false,
    "path": "index.ts",
  },
]
`;
